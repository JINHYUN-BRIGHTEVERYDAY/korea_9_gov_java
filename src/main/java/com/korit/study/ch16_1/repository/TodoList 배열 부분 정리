Repository 패키지의 TodoList 
->  할 일 (Todo) 목록을 저장하고 관리하는 작은 데이터 저장소 역할

따라서 DB 없이 배열만으로 데이터를 저장, 추가, 조회
-> 배열을 이용한 임시 DB

// 시작 부분에서
public class TodoList {
    private Todo[] todos;

-> Todo 객체 여러 개 담을 배열 변수
그러나 크기를 정하지 않음

---
// 생성자
public TodoList() {
    todos = new Todo[0];
}

-> todos에 대한 배열 크기를 0으로 -> 처음에는 아무것도 없는 상태
처음에는 빈 배열로 시작, 새로운 Todo가 생길 때마다 하나씩 늘려나가기


----
배열은 한 번 크기가 정해지면 변경할 수 없다

예를 들어,
`new Todo[3]` 이렇게 만들면
그 배열에는 3개까지만 담을 수 있고,
그 이상 추가하려면 **새 배열을 만들어서 옮겨야 한다



// Todo를 리스트에 추가하는 메서드
    public void add(Todo todo // Todo 객체를 매개변수로 받기) {
    
    // Todo[] 객체 -> temp : 임시배열
    // 새로운 배열 -> 기존보다 1칸 더 크기를 늘리기
        Todo[] temp = new Todo[todos.length + 1];
        
        // 기존에 만들어져있는 todos 배열의 길이만큼 반복을 돌려서
        for (int i = 0; i < todos.length; i++) {
        
        // 새롭게 만들어진 temp 배열에 todos 성분을 넣기
            temp[i] = todos[i];
        }
        
        // 그러면 앞서 temp는 1칸 다시 늘려놨으니까 다시 줄여놓고 
        // 이것을 todo로 세팅을 맞춰놓으면 됨
        temp[temp.length -1] = todo;
        
        // 그러면 애초에 만들었던 todos 배열은 temp와 같게 된다
        todos = temp;
    }
    
즉, 배열은 한 번 만든 뒤에 크기를 바꿀 수 없다
따라서 한 칸 더 큰 배열을 임시로 새로 만들고, 기존 것을 복사하여 확정지은 것


// 다건 조회하기
// Todo 배열 안에서 UserId를 조회하는 메서드 찾기
// 매개변수를 userId로 받고 

    public Todo[] findAllByUserId(int userId) {
    
    // 처음에는 Todo리스트에 조회된 것이 없는 상황에서
        int foundTodoCounter = 0;
        
        // todos에 배열로 저장되어 있을 것 -> 하나하나 빼오기
        for (Todo todo : todos) {
        
        
        // todo에서 getUser로 받아오고  getId로 Id를 가져오기 
        // 이것이 userId와 일치하는지 보기
        // 그렇다면 foundTodoCounter에 저장하는 것
            if (todo.getUser().getId() == userId) {
                foundTodoCounter++;
            }
        }
        
        // foundTodoCounter만큼이 새로운 Todo배열 객체의 크기가 되어야 하고
        // 이것이 temp 처럼 새로운 배열이 되는 것
        Todo[] foundTodos = new Todo[foundTodoCounter];
        
        // todos 배열의 크기만큼 반복을 돌려서
        for (int i = 0, j = 0; i < todos.length; i++) {
        
        // todos[i]에서 userId를 조회하는 절차
            if (todos[i].getUser().getId() == userId) {
            
            // 일치한다면 새로운 배열에 저장하기
                foundTodos[j] = todos[i];
                
                // i가 계속 늘어나는만큼 j도 증가시키기
                j++;
                
                }
            }
        return foundTodos;
    }